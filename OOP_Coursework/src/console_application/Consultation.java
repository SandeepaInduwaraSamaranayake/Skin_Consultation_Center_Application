package console_application;

import javax.swing.*;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Random;


/**
 COPYRIGHT (C) Sandeepa Induwara Samaranayake - 20210302 - W1867067- sandeepa.20210302@iit.ac.lk. All Rights Reserved.
 Object-Oriented Programming Coursework L5 sem 1
 @author Sandeepa Induwara Samaranayake
 @version 1 Console application
 */

/**
 * This class will handle the consultations.
 */
public class Consultation
{
    int consultPatientId;                              // created when consultation is created.
    int consultDoctorMedNo;                            // identified by doctor medical licence number.
    private int consultationId;                        // autogenerated
    private String patientRequirement;
    private LocalDate consultationPlacedDate;           // autogenerated
    private LocalTime consultationPlacedTime;           // autogenerated
    private LocalDate consultationDate;
    private TimeSlot timeSlot;
    private double cost;                               // decide by system.
    private String notes;

    /**
     * this method will return the relevant patient object according to the given patient id.
     * @param patientId patient id of the patient
     * @return relevant patient object
     */
    public Patient getConsultationPatient(int patientId)
    {
        for(Patient patient : WestminsterSkinConsultationManager.getPatientArrayList())
        {
            if(patient.getPatientId() == patientId)
            {
                return patient;
            }
        }
        return null;
    }

    /**
     * this method will return the relevant doctor according to the given medical licence number.
     * @param doctorMedLicenceNo medical licence number of the doctor
     * @return the relevant doctor object
     */
    public Doctor getConsultationDoctor(int doctorMedLicenceNo)
    {
        for(Doctor doctor : WestminsterSkinConsultationManager.getDocArrList())
        {
            if(doctor.getMedicalLicenceNumber() == doctorMedLicenceNo)
            {
                return doctor;
            }
        }
        return null;
    }

    /**
     * Default constructor for Consultation class.
     */
    public Consultation()
    {
        this.setConsultationId(generateConsultationID());
    }

    /**
     * Constructor for Consultation class which accepts two parameters medicalLicenceNumber and patientId.
     * @param medicalLicenceNumber medical license number of the doctor who involves in consultation.
     * @param patientId patient's id who booked this consultation.
     */
    public Consultation(int medicalLicenceNumber, int patientId)
    {
        this.setConsultationId(generateConsultationID());
        this.consultDoctorMedNo = medicalLicenceNumber;
        this.consultPatientId = patientId;
        this.cost = decideCost(patientId,1);
    }

    /**
     * Constructor for Consultation class which accepts two parameters medicalLicenceNumber,
     * patientId and patientRequirement.
     * @param medicalLicenceNumber medical license number of the doctor who involves in consultation.
     * @param patientId patient's id who booked this consultation.
     * @param patientRequirement patient's requirement/s of this consultation.
     */
    public Consultation(int medicalLicenceNumber, int patientId, String patientRequirement)
    {
        this.setConsultationId(generateConsultationID());
        this.consultDoctorMedNo = medicalLicenceNumber;
        this.consultPatientId = patientId;
        this.patientRequirement = patientRequirement;
        this.cost = decideCost(patientId,1);
    }

    /**
     * Constructor for Consultation class which accepts two parameters medicalLicenceNumber,
     * patientId, patientRequirement and date.
     * @param medicalLicenceNumber medical license number of the doctor who involves in consultation.
     * @param patientId patient's id who booked this consultation.
     * @param patientRequirement patient's requirement/s of this consultation.
     * @param consultationDate date the consultation placed.
     */
    public Consultation(int medicalLicenceNumber, int patientId, String patientRequirement, LocalDate consultationDate)
    {
        this.setConsultationId(generateConsultationID());
        this.consultDoctorMedNo = medicalLicenceNumber;
        this.consultPatientId = patientId;
        this.patientRequirement = patientRequirement;
        this.consultationDate = consultationDate;
        this.consultationPlacedDate = consultationPlacedDate();
        this.consultationPlacedTime = consultationPlacedTime();
        this.cost = decideCost(patientId,1);
    }

    /**
     * Constructor for Consultation class which accepts two parameters medicalLicenceNumber,
     * patientId, patientRequirement, date and time.
     * @param medicalLicenceNumber medical license number of the doctor who involves in consultation.
     * @param patientId patient's id who booked this consultation.
     * @param patientRequirement  patient's requirement/s of this consultation.
     * @param consultationDate date the consultation placed.
     * @param consultationDate date of the consultation happen.
     * @param timeSlot timeslot of the consultation.
     */
    public Consultation(int medicalLicenceNumber, int patientId, String patientRequirement, LocalDate consultationDate, String notes,
                        TimeSlot timeSlot)
    {
        this.setConsultationId(generateConsultationID());
        this.consultDoctorMedNo = medicalLicenceNumber;
        this.consultPatientId = patientId;
        this.patientRequirement = patientRequirement;
        this.consultationDate = consultationDate;
        this.notes =  notes;
        this.consultationPlacedDate = consultationPlacedDate();
        this.consultationPlacedTime = consultationPlacedTime();
        this.timeSlot = timeSlot;
        this.cost = decideCost(patientId,1);

    }

    /**
     * getter for consultationId
     * @return consultationId the unique id for a consultation.
     */
    public int getConsultationId()
    {
        return consultationId;
    }

    /**
     * setter for consultationId
     * @param consultationId the unique id for a consultation.
     */
    public void setConsultationId(int consultationId)
    {
        this.consultationId = consultationId;
    }

    /**
     * getter for patientRequirement.
     * @return patient's requirement.
     */
    public String getPatientRequirement()
    {
        return patientRequirement;
    }

    /**
     * setter for patientRequirement.
     * @param patientRequirement patient's requirement/s of this consultation.
     */
    public void setPatientRequirement(String patientRequirement)
    {
        this.patientRequirement = patientRequirement;
    }

    /**
     * getter for cost.
     * @return the consultation cost.
     */
    public double getCost()
    {
        return cost;
    }

    /**
     * setter for cost.
     * @param cost the consultation cost.
     */
    public void setCost(double cost)
    {
        this.cost = cost;
    }

    /**
     * getter for notes.
     * @return consultation notes( doctor's notes ).
     */
    public String getNotes()
    {
        return notes;
    }

    /**
     * setter for notes.
     * @param notes consultation notes( doctor's notes ).
     */
    public void setNotes(String notes)
    {
        this.notes = notes;
    }

    /**
     * getter for timeSlot.
     * @return time slot of the consultation.
     */
    public TimeSlot getTimeSlot()
    {
        return timeSlot;
    }

    /**
     * setter for timeslot.
     * @param timeSlot timeslot user chosen for consultation.
     */
    public void setTimeSlot(TimeSlot timeSlot)
    {
        this.timeSlot = timeSlot;
    }

    /**
     * This method will return the consultation placed date.
     * @return date consultation placed.
     */
    public LocalDate consultationPlacedDate()
    {
        LocalDate today = LocalDate.now();
        return today;
    }

    /**
     * This method will return the consultation placed time.
     * @return time consultation placed.
     */
    public LocalTime consultationPlacedTime()
    {
        LocalTime now = LocalTime.now();
        return now;
    }

    /**
     * this method will return the consultation placed date as a string value
     * @return consultation placed date as a string.
     */
    public String getStringConsultationPlacedDate()
    {
        LocalDate placedDate = this.consultationPlacedDate;
        return placedDate.toString();
    }

    /**
     * this method will return the consultation placed time as a string value
     * @return consultation placed time as a string.
     */
    public String getStringConsultationPlacedTime()
    {
        LocalTime placedTime = this.consultationPlacedTime;
        return placedTime.getHour() + ":" + placedTime.getMinute() + ":" + placedTime.getSecond();
    }

    /**
     * this method will return consultation placed date as a Date object
     * @return consultation placed date
     */
    public Date getDateConsultationPlacedDate()
    {
        return java.sql.Date.valueOf(this.consultationPlacedDate);
    }

    /**
     * this method will return consultation placed time as a Time object
     * @return consultation placed time
     */
    public Time getTimeConsultationPlacedTime()
    {
        return java.sql.Time.valueOf(this.getConsultationPlacedTime());
    }

    /**
     * The getter for consultation date.
     * @return date of consultation.
     */
    public LocalDate getConsultationDate()
    {
        return consultationDate;
    }

    /**
     * The setter for consultation date.
     * @param consultationDate date of consultation.
     */
    public void setConsultationDate(LocalDate consultationDate)
    {
        this.consultationDate = consultationDate;
    }

    /**
     * This method will automatically generate a consultation id.
     * @return generated consultation id.
     */
    public int generateConsultationID()
    {
        int consultIdStartFrom = 20230000;
        ArrayList<Consultation> constArr = WestminsterSkinConsultationManager.getConsultArrList();
        if(constArr.isEmpty())
        {
            return consultIdStartFrom;
        }
        else
        {
            Consultation lastConsultation = constArr.get(constArr.size() - 1);
            return lastConsultation.consultationId + 1;
        }
    }

    /**
     * this method will assign a new doctor if a reserved timeslot is chosen by the user.
     * the timeslotId and the date of consultation remain as the same as user requested.
     * only doctor is going to be changed.
     * @param timeslot Timeslot associated with consultation.
     * @param consultationDate date of consultation.
     * @param docMedLicenceNumber medical licence number of the doctor.
     * @param mode in console or in GUI 1- console, 2- GUI
     * @return medical licence number of the doctor who conduct the consultation.
     */
    public int assignAnotherDoctorIfTimeslotReserved(TimeSlot timeslot, LocalDate consultationDate, int docMedLicenceNumber, int mode)
    {
        Validation val= new Validation();
        if( val.validateTimeSlotNotDuplicating( timeslot, consultationDate, docMedLicenceNumber ) )
        {
            return docMedLicenceNumber;
        }
        else
        {
            if(mode==1) {
                System.out.println("THE REQUESTED TIMESLOT IS ALREADY RESERVED, SO THE SYSTEM WILL ASSIGN YOU TO ANOTHER DOCTOR AVAILABLE WITHIN THE SAME DAY AND TO THE SAME TIMESLOT YOU REQUESTED BEFORE.");
            }
            else if(mode==2)
            {
                JOptionPane.showMessageDialog(null, "THE REQUESTED TIMESLOT ON %d - %d - %d FROM %s IS ALREADY RESERVED, SO THE SYSTEM WILL ASSIGN YOU \nTO ANOTHER DOCTOR AVAILABLE WITHIN THE SAME DAY AND TO THE SAME TIMESLOT YOU REQUESTED BEFORE."
                        .formatted(consultationDate.getYear(), consultationDate.getMonthValue(), consultationDate.getDayOfMonth(), timeslot.getStringTimeslot()),"THE REQUESTED TIMESLOT IS ALREADY RESERVED", JOptionPane.INFORMATION_MESSAGE);
            }
            int timeSlotId = timeslot.getTimeslotId();
            ArrayList<Integer> allDoctorsMedLicenceNumbers = new ArrayList<Integer>();
            ArrayList<Integer> notAvailableDoctorsMedLicenceNumbers = new ArrayList<Integer>();

            if( !WestminsterSkinConsultationManager.getConsultArrList().isEmpty() )
            {
                // gather medical licence numbers of doctors to an arraylist, who are not available on that specific date and timeslot.
                for (Consultation consult : WestminsterSkinConsultationManager.getConsultArrList())
                {
                    if ( consult.getConsultationDate().equals(consultationDate) && consult.getTimeSlot().getTimeslotId() == timeSlotId )
                    {
                        notAvailableDoctorsMedLicenceNumbers.add( consult.getConsultDoctorMedNo() );
                    }
                }

                // found the list of not available doctors on that specific date and timeslot.
                // need to get a list of available doctors on that specific date and timeslot.
                // we are accessing all doctors and remove all not available doctors on that date and timeslot from it.
                // so remaining doctors should be available on that date and timeslot.
                // removeAll() method will give an arraylist "values in allDoctors but not in notAvailableDoctorsMedLicenceNumbers"
                // so remaining doctors should be available.

                // gather medical licence numbers of all doctors to an arraylist.
                for(Doctor doc: WestminsterSkinConsultationManager.getDocArrList())
                {
                    allDoctorsMedLicenceNumbers.add(doc.getMedicalLicenceNumber());
                }

                // allDoctorsMedLicenceNumbers will contain medical licence numbers of only available doctors on that date/ timeslot.
                allDoctorsMedLicenceNumbers.removeAll(notAvailableDoctorsMedLicenceNumbers);

                if(allDoctorsMedLicenceNumbers.isEmpty())
                {
                    if(mode==1) {
                        System.out.println("SORRY, ALL THE DOCTORS ARE RESERVED WITHIN THE DATE YOU PROVIDED. PLEASE CHOOSE ANOTHER DATE AND TRY AGAIN");
                    }
                    else if(mode==2)
                    {
                        JOptionPane.showMessageDialog(null, "SORRY, ALL THE DOCTORS ARE RESERVED WITHIN THE DATE YOU PROVIDED. PLEASE CHOOSE ANOTHER DATE AND TRY AGAIN", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    return 0;
                }
                else
                {
                    Random random = new Random();
                    int index = random.nextInt( allDoctorsMedLicenceNumbers.size() );
                    return allDoctorsMedLicenceNumbers.get(index);
                }
            }
            else
            {
                return docMedLicenceNumber;
            }
        }
    }

    /**
     * This method will decide the cost of the consultation.
     * @param consultPatientId patient id of the patient.
     * @return the cost of the consultation.
     *
     * parameter signature
     * 1 - for console program
     * 2 - for gui program
     */
    public double decideCost(int consultPatientId, int mode)
    {
        boolean isFirstConsultation = true;
        if(mode==1)
        {
            // in the WestminsterSkinConsultationManager class when placing a consultation first patient is adding to the patient array list
            // and then a consultation object will be created. but at that time patient is already in the patient arraylist.
            // so system will always identify that this patient is an old customer.
            // so before we check patientArraylist we need to remove the last element and then check.

            // getting original Patient Arraylist and make an exact copy of it.
            ArrayList<Patient> originalPatientArrList = WestminsterSkinConsultationManager.getPatientArrayList();

            ArrayList<Patient> copyPatientArrList = new ArrayList<Patient>(originalPatientArrList.size());
            for (Patient patient : originalPatientArrList) {
                copyPatientArrList.add(patient);
            }

            // after copying, remove last added patient and check for patient ids.
            copyPatientArrList.remove(copyPatientArrList.size() - 1);

            // now checking that this patient is a new one or old customer.
            for (Patient patient : copyPatientArrList) {
                if (patient.getPatientId() == consultPatientId) {
                    isFirstConsultation = false;
                    break;
                }
            }
        }
        else if (mode==2)
        {
            // now checking that this patient is a new one or old customer.
            for (Consultation consultation : WestminsterSkinConsultationManager.getConsultArrList()) {
                if (consultation.getConsultPatientId() == consultPatientId)
                {
                    isFirstConsultation = false;
                    break;
                }
            }
        }

        if(isFirstConsultation)
        {
            return 15.00;
        }
        else
        {
            return 25.00;
        }
    }

    /**
     * getter for patient id associated with a consultation.
     * @return the patient id
     */
    public int getConsultPatientId()
    {
        return consultPatientId;
    }

    /**
     * setter for consultation patient id
     * @param consultPatientId patient id associated with consultation
     */
    public void setConsultPatientId(int consultPatientId)
    {
        this.consultPatientId = consultPatientId;
    }

    /**
     * getter for medical licence number associated with a consultation.
     * @return medical licence number of the doctor
     */
    public int getConsultDoctorMedNo()
    {
        return consultDoctorMedNo;
    }

    /**
     * setter for doctor's medical licence number for a consultation.
     * @param consultDoctorMedNo medical licence number of a doctor
     */
    public void setConsultDoctorMedNo(int consultDoctorMedNo)
    {
        this.consultDoctorMedNo = consultDoctorMedNo;
    }

    /**
     * getter for consultation placed date
     * @return date consultation placed
     */
    public LocalDate getConsultationPlacedDate()
    {
        return consultationPlacedDate;
    }

    /**
     * setter for consultation placed date
     * @param consultationPlacedDate date consultation placed
     */
    public void setConsultationPlacedDate(LocalDate consultationPlacedDate)
    {
        this.consultationPlacedDate = consultationPlacedDate;
    }

    /**
     * getter for consultation placed time
     * @return time consultation placed
     */
    public LocalTime getConsultationPlacedTime()
    {
        return consultationPlacedTime;
    }

    /**
     * setter for consultation placed time
     * @param consultationPlacedTime time consultation placed
     */
    public void setConsultationPlacedTime(LocalTime consultationPlacedTime)
    {
        this.consultationPlacedTime = consultationPlacedTime;
    }
}
